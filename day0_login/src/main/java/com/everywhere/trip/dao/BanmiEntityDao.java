package com.everywhere.trip.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.everywhere.trip.bean.BanmiEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANMI_ENTITY".
*/
public class BanmiEntityDao extends AbstractDao<BanmiEntity, Long> {

    public static final String TABLENAME = "BANMI_ENTITY";

    /**
     * Properties of entity BanmiEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ids = new Property(0, Long.class, "ids", true, "_id");
        public final static Property Occupation = new Property(1, String.class, "occupation", false, "OCCUPATION");
        public final static Property Following = new Property(2, int.class, "following", false, "FOLLOWING");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Photo = new Property(4, String.class, "photo", false, "PHOTO");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property Id = new Property(6, int.class, "id", false, "ID");
        public final static Property Introduction = new Property(7, String.class, "introduction", false, "INTRODUCTION");
        public final static Property IsFollowed = new Property(8, boolean.class, "isFollowed", false, "IS_FOLLOWED");
    }


    public BanmiEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BanmiEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANMI_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ids
                "\"OCCUPATION\" TEXT," + // 1: occupation
                "\"FOLLOWING\" INTEGER NOT NULL ," + // 2: following
                "\"NAME\" TEXT," + // 3: name
                "\"PHOTO\" TEXT," + // 4: photo
                "\"LOCATION\" TEXT," + // 5: location
                "\"ID\" INTEGER NOT NULL ," + // 6: id
                "\"INTRODUCTION\" TEXT," + // 7: introduction
                "\"IS_FOLLOWED\" INTEGER NOT NULL );"); // 8: isFollowed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANMI_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BanmiEntity entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
 
        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(2, occupation);
        }
        stmt.bindLong(3, entity.getFollowing());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(5, photo);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
        stmt.bindLong(7, entity.getId());
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
        stmt.bindLong(9, entity.getIsFollowed() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BanmiEntity entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
 
        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(2, occupation);
        }
        stmt.bindLong(3, entity.getFollowing());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(5, photo);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
        stmt.bindLong(7, entity.getId());
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
        stmt.bindLong(9, entity.getIsFollowed() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BanmiEntity readEntity(Cursor cursor, int offset) {
        BanmiEntity entity = new BanmiEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ids
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // occupation
            cursor.getInt(offset + 2), // following
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // photo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
            cursor.getInt(offset + 6), // id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // introduction
            cursor.getShort(offset + 8) != 0 // isFollowed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BanmiEntity entity, int offset) {
        entity.setIds(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOccupation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFollowing(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId(cursor.getInt(offset + 6));
        entity.setIntroduction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsFollowed(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BanmiEntity entity, long rowId) {
        entity.setIds(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BanmiEntity entity) {
        if(entity != null) {
            return entity.getIds();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BanmiEntity entity) {
        return entity.getIds() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
